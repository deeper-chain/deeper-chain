
//! Autogenerated weights for `pallet_deeper_node`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `yubo-X400`, CPU: `AMD Ryzen 7 PRO 4750G with Radeon Graphics`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/debug/deeper-chain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_deeper_node
// --no-storage-info
// --no-median-slopes
// --no-min-squares
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/deeper-node/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_deeper_node`.
pub trait WeightInfo {
	fn register_device_deprecated() -> Weight;
	fn unregister_device() -> Weight;
	fn register_server() -> Weight;
	fn update_server() -> Weight;
	fn unregister_server() -> Weight;
	fn im_online() -> Weight;
	fn report_credit_proof() -> Weight;
	fn reward_mapping() -> Weight;
	fn get_npow_reward() -> Weight;
}

/// Weights for `pallet_deeper_node` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `DeeperNode::RegionMapInit` (r:1 w:0)
	/// Proof: `DeeperNode::RegionMapInit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::RegionMap` (r:1 w:0)
	/// Proof: `DeeperNode::RegionMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::DeviceInfo` (r:1 w:1)
	/// Proof: `DeeperNode::DeviceInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn register_device_deprecated() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1234`
		//  Estimated: `4699`
		// Minimum execution time: 737_830_000 picoseconds.
		Weight::from_parts(747_198_000, 4699)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `DeeperNode::DeviceInfo` (r:1 w:1)
	/// Proof: `DeeperNode::DeviceInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::RegionMap` (r:2 w:0)
	/// Proof: `DeeperNode::RegionMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::ServersByCountry` (r:1 w:0)
	/// Proof: `DeeperNode::ServersByCountry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::ServersByRegion` (r:2 w:0)
	/// Proof: `DeeperNode::ServersByRegion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn unregister_device() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1557`
		//  Estimated: `7497`
		// Minimum execution time: 994_991_000 picoseconds.
		Weight::from_parts(1_003_989_000, 7497)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `DeeperNode::DeviceInfo` (r:1 w:1)
	/// Proof: `DeeperNode::DeviceInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::RegionMap` (r:2 w:0)
	/// Proof: `DeeperNode::RegionMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::ServersByCountry` (r:1 w:1)
	/// Proof: `DeeperNode::ServersByCountry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::ServersByRegion` (r:2 w:2)
	/// Proof: `DeeperNode::ServersByRegion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_server() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1417`
		//  Estimated: `7357`
		// Minimum execution time: 905_100_000 picoseconds.
		Weight::from_parts(921_932_000, 7357)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `DeeperNode::DeviceInfo` (r:1 w:1)
	/// Proof: `DeeperNode::DeviceInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_server() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `329`
		//  Estimated: `3794`
		// Minimum execution time: 246_901_000 picoseconds.
		Weight::from_parts(253_715_000, 3794)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `DeeperNode::DeviceInfo` (r:1 w:1)
	/// Proof: `DeeperNode::DeviceInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::RegionMap` (r:2 w:0)
	/// Proof: `DeeperNode::RegionMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::ServersByCountry` (r:1 w:1)
	/// Proof: `DeeperNode::ServersByCountry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::ServersByRegion` (r:2 w:2)
	/// Proof: `DeeperNode::ServersByRegion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unregister_server() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1632`
		//  Estimated: `7572`
		// Minimum execution time: 996_966_000 picoseconds.
		Weight::from_parts(1_006_954_000, 7572)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `DeeperNode::OnboardTime` (r:1 w:1)
	/// Proof: `DeeperNode::OnboardTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::DevicesOnboard` (r:1 w:1)
	/// Proof: `DeeperNode::DevicesOnboard` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::ImOnline` (r:0 w:1)
	/// Proof: `DeeperNode::ImOnline` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn im_online() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `334`
		//  Estimated: `3799`
		// Minimum execution time: 366_190_000 picoseconds.
		Weight::from_parts(371_360_000, 3799)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `CreditAccumulation::AtmosAccountid` (r:1 w:0)
	/// Proof: `CreditAccumulation::AtmosAccountid` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CreditAccumulation::TmpAtmosAccountid` (r:1 w:0)
	/// Proof: `CreditAccumulation::TmpAtmosAccountid` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::DeviceCreditProof` (r:0 w:1)
	/// Proof: `DeeperNode::DeviceCreditProof` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn report_credit_proof() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `165`
		//  Estimated: `1650`
		// Minimum execution time: 399_182_000 picoseconds.
		Weight::from_parts(405_224_000, 1650)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CreditAccumulation::AtmosAccountid` (r:1 w:0)
	/// Proof: `CreditAccumulation::AtmosAccountid` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::RewardsAccountsEVMtoDeeper` (r:1 w:1)
	/// Proof: `DeeperNode::RewardsAccountsEVMtoDeeper` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::RewardsAccountsDeepertoEVM` (r:1 w:1)
	/// Proof: `DeeperNode::RewardsAccountsDeepertoEVM` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn reward_mapping() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `692`
		//  Estimated: `4157`
		// Minimum execution time: 599_666_000 picoseconds.
		Weight::from_parts(609_685_000, 4157)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `DeeperNode::RewardsAccountsDeepertoEVM` (r:1 w:0)
	/// Proof: `DeeperNode::RewardsAccountsDeepertoEVM` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_npow_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `365`
		//  Estimated: `3830`
		// Minimum execution time: 266_379_000 picoseconds.
		Weight::from_parts(270_788_000, 3830)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `DeeperNode::RegionMapInit` (r:1 w:0)
	/// Proof: `DeeperNode::RegionMapInit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::RegionMap` (r:1 w:0)
	/// Proof: `DeeperNode::RegionMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::DeviceInfo` (r:1 w:1)
	/// Proof: `DeeperNode::DeviceInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn register_device_deprecated() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1234`
		//  Estimated: `4699`
		// Minimum execution time: 737_830_000 picoseconds.
		Weight::from_parts(747_198_000, 4699)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `DeeperNode::DeviceInfo` (r:1 w:1)
	/// Proof: `DeeperNode::DeviceInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::RegionMap` (r:2 w:0)
	/// Proof: `DeeperNode::RegionMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::ServersByCountry` (r:1 w:0)
	/// Proof: `DeeperNode::ServersByCountry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::ServersByRegion` (r:2 w:0)
	/// Proof: `DeeperNode::ServersByRegion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn unregister_device() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1557`
		//  Estimated: `7497`
		// Minimum execution time: 994_991_000 picoseconds.
		Weight::from_parts(1_003_989_000, 7497)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `DeeperNode::DeviceInfo` (r:1 w:1)
	/// Proof: `DeeperNode::DeviceInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::RegionMap` (r:2 w:0)
	/// Proof: `DeeperNode::RegionMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::ServersByCountry` (r:1 w:1)
	/// Proof: `DeeperNode::ServersByCountry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::ServersByRegion` (r:2 w:2)
	/// Proof: `DeeperNode::ServersByRegion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_server() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1417`
		//  Estimated: `7357`
		// Minimum execution time: 905_100_000 picoseconds.
		Weight::from_parts(921_932_000, 7357)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `DeeperNode::DeviceInfo` (r:1 w:1)
	/// Proof: `DeeperNode::DeviceInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_server() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `329`
		//  Estimated: `3794`
		// Minimum execution time: 246_901_000 picoseconds.
		Weight::from_parts(253_715_000, 3794)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `DeeperNode::DeviceInfo` (r:1 w:1)
	/// Proof: `DeeperNode::DeviceInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::RegionMap` (r:2 w:0)
	/// Proof: `DeeperNode::RegionMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::ServersByCountry` (r:1 w:1)
	/// Proof: `DeeperNode::ServersByCountry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::ServersByRegion` (r:2 w:2)
	/// Proof: `DeeperNode::ServersByRegion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unregister_server() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1632`
		//  Estimated: `7572`
		// Minimum execution time: 996_966_000 picoseconds.
		Weight::from_parts(1_006_954_000, 7572)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `DeeperNode::OnboardTime` (r:1 w:1)
	/// Proof: `DeeperNode::OnboardTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::DevicesOnboard` (r:1 w:1)
	/// Proof: `DeeperNode::DevicesOnboard` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::ImOnline` (r:0 w:1)
	/// Proof: `DeeperNode::ImOnline` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn im_online() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `334`
		//  Estimated: `3799`
		// Minimum execution time: 366_190_000 picoseconds.
		Weight::from_parts(371_360_000, 3799)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `CreditAccumulation::AtmosAccountid` (r:1 w:0)
	/// Proof: `CreditAccumulation::AtmosAccountid` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CreditAccumulation::TmpAtmosAccountid` (r:1 w:0)
	/// Proof: `CreditAccumulation::TmpAtmosAccountid` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::DeviceCreditProof` (r:0 w:1)
	/// Proof: `DeeperNode::DeviceCreditProof` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn report_credit_proof() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `165`
		//  Estimated: `1650`
		// Minimum execution time: 399_182_000 picoseconds.
		Weight::from_parts(405_224_000, 1650)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CreditAccumulation::AtmosAccountid` (r:1 w:0)
	/// Proof: `CreditAccumulation::AtmosAccountid` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::RewardsAccountsEVMtoDeeper` (r:1 w:1)
	/// Proof: `DeeperNode::RewardsAccountsEVMtoDeeper` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `DeeperNode::RewardsAccountsDeepertoEVM` (r:1 w:1)
	/// Proof: `DeeperNode::RewardsAccountsDeepertoEVM` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn reward_mapping() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `692`
		//  Estimated: `4157`
		// Minimum execution time: 599_666_000 picoseconds.
		Weight::from_parts(609_685_000, 4157)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `DeeperNode::RewardsAccountsDeepertoEVM` (r:1 w:0)
	/// Proof: `DeeperNode::RewardsAccountsDeepertoEVM` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_npow_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `365`
		//  Estimated: `3830`
		// Minimum execution time: 266_379_000 picoseconds.
		Weight::from_parts(270_788_000, 3830)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
}
