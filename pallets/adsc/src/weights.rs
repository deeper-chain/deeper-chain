
//! Autogenerated weights for `pallet_adsc`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-09, STEPS: `5`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `yubo-X400`, CPU: `AMD Ryzen 7 PRO 4750G with Radeon Graphics`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/debug/deeper-chain
// benchmark
// pallet
// --chain=dev
// --steps=5
// --repeat=2
// --pallet=pallet_adsc
// --no-storage-info
// --no-median-slopes
// --no-min-squares
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/adsc/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_adsc`.
pub trait WeightInfo {
	fn add_adsc_staking_account() -> Weight;
	fn set_reward_period() -> Weight;
	fn set_half_reward_target() -> Weight;
	fn set_base_reward() -> Weight;
	fn set_exchange_rate() -> Weight;
	fn bridge_burn_adsc() -> Weight;
	fn swap_adsc_to_dpr() -> Weight;
}

/// Weights for `pallet_adsc` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Adsc::CurrentRewardPeriod` (r:1 w:0)
	/// Proof: `Adsc::CurrentRewardPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Adsc::AdscStakers` (r:1 w:1)
	/// Proof: `Adsc::AdscStakers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Adsc::CounterForAdscStakers` (r:1 w:1)
	/// Proof: `Adsc::CounterForAdscStakers` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn add_adsc_staking_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `156`
		//  Estimated: `3621`
		// Minimum execution time: 382_692_000 picoseconds.
		Weight::from_parts(404_513_000, 3621)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Adsc::CurrentRewardPeriod` (r:0 w:1)
	/// Proof: `Adsc::CurrentRewardPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_reward_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `150`
		//  Estimated: `3513`
		// Minimum execution time: 253_458_000 picoseconds.
		Weight::from_parts(272_985_000, 3513)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Adsc::CurrentHalfTarget` (r:0 w:1)
	/// Proof: `Adsc::CurrentHalfTarget` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_half_reward_target() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `150`
		//  Estimated: `3513`
		// Minimum execution time: 264_739_000 picoseconds.
		Weight::from_parts(270_039_000, 3513)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Adsc::CurrentAdscBaseReward` (r:0 w:1)
	/// Proof: `Adsc::CurrentAdscBaseReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_base_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `150`
		//  Estimated: `3513`
		// Minimum execution time: 254_229_000 picoseconds.
		Weight::from_parts(273_575_000, 3513)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Adsc::AdscExchangeRate` (r:0 w:1)
	/// Proof: `Adsc::AdscExchangeRate` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_exchange_rate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `150`
		//  Estimated: `3513`
		// Minimum execution time: 255_071_000 picoseconds.
		Weight::from_parts(276_201_000, 3513)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:1)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn bridge_burn_adsc() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `501`
		//  Estimated: `3675`
		// Minimum execution time: 866_995_000 picoseconds.
		Weight::from_parts(875_621_000, 3675)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Adsc::AdscExchangeRate` (r:1 w:0)
	/// Proof: `Adsc::AdscExchangeRate` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn swap_adsc_to_dpr() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `632`
		//  Estimated: `6208`
		// Minimum execution time: 1_750_400_000 picoseconds.
		Weight::from_parts(1_833_056_000, 6208)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Adsc::CurrentRewardPeriod` (r:1 w:0)
	/// Proof: `Adsc::CurrentRewardPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Adsc::AdscStakers` (r:1 w:1)
	/// Proof: `Adsc::AdscStakers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Adsc::CounterForAdscStakers` (r:1 w:1)
	/// Proof: `Adsc::CounterForAdscStakers` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn add_adsc_staking_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `156`
		//  Estimated: `3621`
		// Minimum execution time: 382_692_000 picoseconds.
		Weight::from_parts(404_513_000, 3621)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Adsc::CurrentRewardPeriod` (r:0 w:1)
	/// Proof: `Adsc::CurrentRewardPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_reward_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `150`
		//  Estimated: `3513`
		// Minimum execution time: 253_458_000 picoseconds.
		Weight::from_parts(272_985_000, 3513)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Adsc::CurrentHalfTarget` (r:0 w:1)
	/// Proof: `Adsc::CurrentHalfTarget` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_half_reward_target() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `150`
		//  Estimated: `3513`
		// Minimum execution time: 264_739_000 picoseconds.
		Weight::from_parts(270_039_000, 3513)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Adsc::CurrentAdscBaseReward` (r:0 w:1)
	/// Proof: `Adsc::CurrentAdscBaseReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_base_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `150`
		//  Estimated: `3513`
		// Minimum execution time: 254_229_000 picoseconds.
		Weight::from_parts(273_575_000, 3513)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Adsc::AdscExchangeRate` (r:0 w:1)
	/// Proof: `Adsc::AdscExchangeRate` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_exchange_rate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `150`
		//  Estimated: `3513`
		// Minimum execution time: 255_071_000 picoseconds.
		Weight::from_parts(276_201_000, 3513)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `UserPrivileges::UserPrivileges` (r:1 w:0)
	/// Proof: `UserPrivileges::UserPrivileges` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:1)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn bridge_burn_adsc() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `501`
		//  Estimated: `3675`
		// Minimum execution time: 866_995_000 picoseconds.
		Weight::from_parts(875_621_000, 3675)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Adsc::AdscExchangeRate` (r:1 w:0)
	/// Proof: `Adsc::AdscExchangeRate` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn swap_adsc_to_dpr() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `632`
		//  Estimated: `6208`
		// Minimum execution time: 1_750_400_000 picoseconds.
		Weight::from_parts(1_833_056_000, 6208)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
}
