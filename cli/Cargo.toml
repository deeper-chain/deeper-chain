[package]
name = "node-cli"
version = "4.0.0-dev"
description = "Generic Substrate node implementation in Rust."
build = "build.rs"
edition = '2021'
license = "GPL-3.0-or-later WITH Classpath-exception-2.0"
homepage = "https://substrate.io"
#repository.workspace = true
publish = false

[package.metadata.wasm-pack.profile.release]
# `wasm-opt` has some problems on linux, see
# https://github.com/rustwasm/wasm-pack/issues/781 etc.
wasm-opt = false

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[badges]
travis-ci = { repository = "paritytech/substrate" }
maintenance = { status = "actively-developed" }
is-it-maintained-issue-resolution = { repository = "paritytech/substrate" }
is-it-maintained-open-issues = { repository = "paritytech/substrate" }

[[bin]]
name = "deeper-chain"
path = "bin/main.rs"
required-features = ["cli"]

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
array-bytes = { workspace = true }
clap = { workspace = true, features = ["derive"], optional = true }
codec = { workspace = true }
serde = { workspace = true, features = ["derive"] }
jsonrpsee = { workspace = true, features = ["server"] }
futures = { workspace = true }
log = { workspace = true }
rand = { workspace = true }
hex-literal = { workspace = true }

# Substrate
prometheus-endpoint = { workspace = true, default-features = true }
sc-basic-authorship = { workspace = true }
sc-chain-spec = {workspace = true }
sc-cli = {workspace = true, optional = true }
sc-client-api = {workspace = true }
sc-consensus = {workspace = true }
sc-consensus-aura = {workspace = true }
sc-consensus-babe = {workspace = true }
grandpa = { workspace = true }
sc-consensus-manual-seal = {workspace = true }
sc-executor = {workspace = true }
sc-network = {workspace = true }
sc-network-sync = {workspace = true }
sc-offchain = {workspace = true }
sc-rpc = {workspace = true }
sc-rpc-api = {workspace = true }
sc-service = {workspace = true }
sc-telemetry = {workspace = true }
sc-transaction-pool = {workspace = true }
sc-transaction-pool-api = {workspace = true }
sc-sync-state-rpc= {workspace = true }
sc-client-db= {workspace = true }
sc-storage-monitor = {workspace = true }
sc-statement-store = {workspace = true }
sc-network-statement = {workspace = true }
sc-authority-discovery = {workspace = true }
sc-sysinfo= {workspace = true }


sp-api = {workspace = true }
sp-block-builder = {workspace = true }
sp-blockchain = {workspace = true }
sp-consensus-aura = {workspace = true }
sp-consensus-babe = {workspace = true }
grandpa-primitives = { workspace = true }
sp-core = {workspace = true }
sp-inherents = {workspace = true }
sp-offchain = {workspace = true }
sp-runtime = {workspace = true }
sp-session = {workspace = true }
sp-state-machine = {workspace = true }
sp-timestamp = {workspace = true }
sp-transaction-pool = {workspace = true }
sp-authority-discovery = {workspace = true }
sp-statement-store = {workspace = true }
sp-keystore = {workspace = true }
sp-keyring = {workspace = true }


# These dependencies are used for RPC
frame-system-rpc-runtime-api = {workspace = true }
pallet-transaction-payment-rpc = {workspace = true }
pallet-transaction-payment-rpc-runtime-api = {workspace = true }
substrate-frame-rpc-system = {workspace = true }

# These dependencies are used for runtime benchmarking
frame-system = {workspace = true }
pallet-transaction-payment = {workspace = true }
pallet-im-online = {workspace = true }
pallet-assets = {workspace = true }
pallet-balances = {workspace = true }
pallet-timestamp = {workspace = true }

frame-benchmarking = {workspace = true }
frame-benchmarking-cli = {workspace = true, optional = true }

# Frontier
fc-api = {workspace = true }
fc-cli = {workspace = true }
fc-consensus = {workspace = true }
fc-db = {workspace = true }
fc-mapping-sync = {workspace = true }
fc-rpc = {workspace = true }
fc-rpc-core = {workspace = true }
fc-storage = {workspace = true }
fp-account = {workspace = true }
fp-dynamic-fee = {workspace = true }
fp-evm = {workspace = true }
fp-rpc = {workspace = true }

sp-transaction-storage-proof = {workspace = true}
sc-consensus-slots = {workspace = true}

# node-specific dependencies
node-runtime = { workspace = true, features = ["std"] }
node-rpc = {  workspace = true }
node-primitives = { workspace = true }
node-executor = { workspace = true }

# CLI-specific dependencies
node-inspect = { workspace = true, optional = true }
try-runtime-cli = { workspace = true, optional = true }
serde_json = { workspace = true }

[build-dependencies]
substrate-build-script-utils = { workspace = true, optional = true }
clap = { workspace = true, optional = true }
clap_complete = { workspace = true, optional = true }
substrate-frame-cli = { workspace = true, optional = true}
node-inspect = {  workspace = true, optional = true }
sc-cli = {workspace = true,optional = true }
sc-storage-monitor = {workspace = true }
frame-benchmarking-cli = {workspace = true, optional = true}

[dev-dependencies]
sp-tracing = { workspace = true }
tempfile = { workspace = true }
sc-service-test= { workspace = true}
sc-consensus-epochs= { workspace = true}
sc-keystore= { workspace = true }
sp-consensus = { workspace = true }


[features]
default = [ "cli" ]
cli = [
	"clap",
	"clap_complete",
	"frame-benchmarking-cli",
	"node-inspect",
	"sc-cli",
	"sc-service/rocksdb",
	"substrate-build-script-utils",
	"substrate-frame-cli",
	"try-runtime-cli",
]
runtime-benchmarks = [
	"frame-benchmarking-cli/runtime-benchmarks",
	"frame-system/runtime-benchmarks",
	#"node-runtime/runtime-benchmarks",
	#"pallet-asset-tx-payment/runtime-benchmarks",
	"pallet-assets/runtime-benchmarks",
	"pallet-balances/runtime-benchmarks",
	"pallet-im-online/runtime-benchmarks",
	"pallet-timestamp/runtime-benchmarks",
	"sc-client-db/runtime-benchmarks",
	"sc-service/runtime-benchmarks",
	"sp-runtime/runtime-benchmarks",
]
# Enable features that allow the runtime to be tried and debugged. Name might be subject to change
# in the near future.